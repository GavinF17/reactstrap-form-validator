{"version":3,"sources":["layouts/DocsLayout.js","layouts/GeneralLayout.js","routes/index.js","routes/Routes.js","theme.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DocsLayout","children","className","GeneralLayout","Homepage","React","lazy","flattenedRoutes","flatten","routes","flatRoutes","forEach","item","push","path","name","header","component","docsRegex","RegExp","Routes","props","location","useLocation","Layout","test","pathname","fallback","map","index","exact","Component","key","render","colours","green","white","lightTheme","body","color","boxShadow","cardBackground","cardColor","docsNavShadow","darkTheme","GlobalStyles","createGlobalStyle","theme","Header","dark","toggleTheme","Container","fluid","target","href","src","github","npm","moon","sun","onClick","id","App","useState","localStorage","getItem","setDark","newVal","setItem","String","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.daafa06c.chunk.js","sourcesContent":["import React from 'react';\n\nexport const DocsLayout = ({children}) => (\n  <>\n    {/*<DocsNavigation/>*/}\n    <div className=\"float-left\">\n      {children}\n    </div>\n  </>\n);\n","import React from 'react';\n\nexport const GeneralLayout = ({children}) => {\n  return (\n    <div className=\"general-content\">\n      {children}\n    </div>\n  )\n};\n","import React from 'react';\n\n// General\nconst Homepage = React.lazy(() => import('../pages/Homepage'));\n\n// General\nconst Docs = React.lazy(() => import('../pages/Docs'));\n\nconst generalRoutes = {\n  path: '/',\n  name: 'Home',\n  header: 'Home',\n  children: [\n    {\n      path: '/',\n      name: 'Home',\n      // icon: 'question-circle',\n      component: Homepage\n    }\n  ]\n}\n\nconst docRoutes = {\n  path: '/docs',\n  name: 'Docs',\n  header: 'Quizee',\n  children: [\n    {\n      path: '/docs',\n      name: 'Docs',\n      // icon: 'question-circle',\n      component: Docs\n    }\n  ]\n};\n\n\nconst flatten = routes => {\n  let flatRoutes = [];\n\n  routes = routes || [];\n  routes.forEach(item => {\n    flatRoutes.push(item);\n\n    if (typeof item.children !== 'undefined') {\n      flatRoutes = [...flatRoutes, ...flatten(item.children)];\n    }\n  });\n  return flatRoutes;\n};\n\nconst allRoutes = [docRoutes, generalRoutes];\nconst flattenedRoutes = flatten(allRoutes);\n\nexport {allRoutes, flattenedRoutes, docRoutes};\n\n\n","import React, {Suspense} from \"react\";\nimport {useLocation} from \"react-router-dom\";\nimport {DocsLayout} from \"../layouts/DocsLayout\";\nimport {GeneralLayout} from \"../layouts/GeneralLayout\";\nimport {flattenedRoutes as routes} from './index';\nimport {Route, Switch} from \"react-router\";\n\nconst docsRegex = new RegExp(\"/?docs\");\n\nexport const Routes = (props) => {\n  const location = useLocation();\n\n  const Layout = docsRegex.test(location.pathname) ? DocsLayout : GeneralLayout;\n\n  return (\n    <Suspense fallback={<div/>}>\n      <Layout {...props}>\n        <Switch>\n          {routes.map(({children, path, exact, component: Component}, index) => (\n              !children && (\n                <Route key={index}\n                       path={path}\n                       exact={exact}\n                       render={props => <Component {...props}/>}\n                />\n              )\n            )\n          )}\n        </Switch>\n      </Layout>\n    </Suspense>\n  );\n};\n","import {createGlobalStyle} from \"styled-components\";\n\nconst colours = {\n  green: '#28b76b',\n  grey: '#1C1C1C',\n  white: '#FFFFFF',\n  black: '#000000',\n  red: '#DA353C'\n};\n\nconst {green, grey, white, black, red} = colours;\n\nexport const lightTheme = {\n  body: white,\n  color: black,\n  boxShadow: grey + '55',\n  cardBackground: 'none',\n  cardColor: grey,\n  docsNavShadow: grey,\n};\n\nexport const darkTheme = {\n  body: grey,\n  color: white,\n  boxShadow: white + '44',\n  cardBackground: green,\n  cardColor: white,\n  docsNavShadow: white,\n};\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.color};\n  }\n\n  .header-banner {\n    color: ${white};\n    h1, h2, h3, h4, h5, h6 {\n      color: ${white};\n    }\n    background: ${green};\n  }\n\n  .card {\n    box-shadow: 0px 0px 5px 1px ${({ theme }) => theme.boxShadow};\n    background-color: ${({ theme }) => theme.cardBackground};\n    color: ${({ theme }) => theme.cardColor};\n  }\n\n  .header-icons svg {\n    fill: ${({ theme }) => theme.color};\n  }\n\n  #docs-nav {\n    box-shadow: ${({ theme }) => theme.docsNavShadow};\n  }\n`\n","import React from 'react';\nimport {Container} from \"reactstrap\";\nimport github from '@fortawesome/fontawesome-free/svgs/brands/github.svg'\nimport npm from '@fortawesome/fontawesome-free/svgs/brands/npm.svg'\nimport sun from '@fortawesome/fontawesome-free/svgs/regular/sun.svg'\nimport moon from '@fortawesome/fontawesome-free/svgs/regular/moon.svg'\nimport {ReactSVG} from \"react-svg\";\n\nexport const Header = ({dark, toggleTheme}) => (\n  <Container fluid className=\"p-0\">\n    <div className=\"header-icons-container\">\n      <div className=\"header-icons\">\n        <a target=\"_empty\" href=\"https://github.com/GavinF17/reactstrap-form-validator\">\n          <ReactSVG className=\"mr-2\" src={github}/>\n        </a>\n        <a target=\"_empty\" href=\"https://www.npmjs.com/package/reactstrap-form-validator\">\n          <ReactSVG className=\"mr-2\" src={npm}/>\n        </a>\n        {/*<img className=\"mr-2 float-left\" src={dark ? moon : sun} alt=\"Toggle theme\" onClick={toggleTheme}/>*/}\n        {/*<svg className=\"mr-2 float-left\"  xmlns={sun}/>*/}\n        <ReactSVG className=\"float-left\"  src={dark ? moon : sun} onClick={toggleTheme}/>\n      </div>\n    </div>\n\n    <div id=\"header-banner\" className=\"header-banner position-relative\">\n      <div className=\"far header-banner-bg\"/>\n      <div className=\"header-banner-text\">\n        Reactstrap Form Validation\n      </div>\n    </div>\n  </Container>\n);\n","import React, {useEffect, useState} from 'react';\nimport \"./assets/reactivestrap.scss\"\nimport {Routes} from \"./routes/Routes\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {ThemeProvider} from \"styled-components\";\nimport {darkTheme, GlobalStyles, lightTheme} from \"./theme\";\nimport {Header} from \"./components/Header\";\n\nconst App = () => {\n  const [dark, setDark] = useState(localStorage.getItem('darkTheme') === 'true');\n\n  const toggleTheme = () => {\n    const newVal = !dark;\n    setDark(newVal);\n    localStorage.setItem('darkTheme', String(newVal));\n  };\n\n  return (\n    <>\n      <Header dark={dark} toggleTheme={toggleTheme}/>\n      <ThemeProvider theme={dark ? darkTheme : lightTheme}>\n        <GlobalStyles/>\n        <BrowserRouter>\n          <Routes/>\n        </BrowserRouter>\n      </ThemeProvider>\n    </>\n  )\n};\n\nexport default App;\n\n// function App() {\n//   const [externalErrors, setExternalErrors] = useState({});\n//   const [forename, setForename] = useState(\"bb\");\n//\n//   const onValidSubmit = (values) => {\n//     if (externalErrors.email) {\n//       setExternalErrors({\n//         forename: ['something forename'],\n//         surname: ['something surname']\n//       });\n//     } else {\n//       setExternalErrors({\n//         email: [\"Incorrect email format\"],\n//         forename: ['something forename'],\n//         surname: ['something surname']\n//       });\n//     }\n//\n//     setForename(\"gavin\")\n//   };\n//\n//   const onInvalidSubmit = (values, errors) => console.log(\"onInvalidSubmit\", values, errors);\n//\n//   return (\n//     <div className=\"mt-5\">\n//       <Container>\n//         <VForm\n//           onValidSubmit={onValidSubmit}\n//           onInvalidSubmit={onInvalidSubmit}\n//           externalErrors={externalErrors}\n//         >\n//           <Row>\n//             {/*<VFormGroup>*/}\n//             {/*  <VInput name=\"forename\" validators={{minLength: {value: 2, message: \"Too damn short\"}}}/>*/}\n//             {/*</VFormGroup>*/}\n//           </Row>\n//           <Row>\n//             <FormGroup>\n//               <Label for=\"forename\">Name</Label>\n//               <VInputGroup>\n//                 <VInput value={forename} name=\"forename\"\n//                         validators={{minLength: {value: 2, message: \"Forename, Too damn short\"}, pattern: {value: \"^[a-z]*$\"}}}/>\n//                 <VInput value=\"\" name=\"surname\"\n//                         validators={{minLength: {value: 2, message: \"Surname Too damn short\"}, required: true}}/>\n//               </VInputGroup>\n//               <VFormFeedback for={[\"forename\", \"surname\"]}/>\n//             </FormGroup>\n//           </Row>\n//           {/*<Row>*/}\n//           {/*  <FormGroup>*/}\n//           {/*    <InputGroup>*/}\n//           {/*      <VInput value=\"aa\" name=\"forename\"*/}\n//           {/*              validators={{minLength: {value: 2, message: \"Forename, Too damn short\"}}}/>*/}\n//           {/*      <VInput value=\"aa\" name=\"surname\"*/}\n//           {/*              validators={{minLength: {value: 2, message: \"Surname Too damn short\"}}}/>*/}\n//           {/*    </InputGroup>*/}\n//           {/*    <VFormFeedback for={[\"forename\", \"surname\"]}/>*/}\n//           {/*  </FormGroup>*/}\n//           {/*</Row>*/}\n//           <Row>\n//             <FormGroup>\n//               <Label className=\"is-invalid\" for=\"email\">Email</Label>\n//               <VInput value=\"a\" name=\"email\"\n//                 // validators={{minLength: {value: 2, message: \"Too damn short\"}}}\n//               />\n//               <VFormFeedback for=\"email\"/>\n//             </FormGroup>\n//           </Row>\n//           <FormGroup>\n//             <Button>Submit</Button>\n//           </FormGroup>\n//         </VForm>\n//         {JSON.stringify(externalErrors)}\n//       </Container>\n//     </div>\n//   );\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}